{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;wBACR,WAAW;;iCACP,sBAAsB;;AAEhD,SAAS,UAAU,CAAC,IAAI,EAAE;;;;;AAKxB,MAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAA;AAClC,MAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,MAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;;;AAGtB,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;AAC1F,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3B,QAAI,MAAM,CAAC,YAAY,GAAG,CAAC,EAAE;AAC3B,YAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC;eAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;OAAA,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;eAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;OAAA,CAAC,CAAA;KAC5F;AACD,WAAO,EAAE,CAAC;GACX,CAAA;CACF;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE;;AAE5B,SAAO,UAAA,KAAK,EAAI;;AAEd,QAAI,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AACnD,aAAO,KAAK,CAAA;KACb;;AAED,QAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,IAAI,KAAK,CAAC,QAAQ,KAAK,KAAK,EAAE;AACvD,aAAO,KAAK,CAAA;KACb;;AAED,WAAO,QAAQ,CAAC,oBAAE,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;aAAM,KAAK;KAAA,CAAC,CAAA;GAC/D,CAAA;CACF;;AAED,IAAI,UAAU,CAAA;;qBAEC,UAAS,EAAE,EAAa;MAAX,IAAI,yDAAG,EAAE;;AACnC,MAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE;AAC7B,aAAS,EAAE,OAAO;GACnB,CAAC,CAAC;;AAEH,MAAI,CAAE,UAAU,EAAE;AAChB,cAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;GACnD;;AAED,SAAO,kCAAU,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC,CAAA;CACpD","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nfunction tslintTask(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  var log = require('sigh-core').log\n  var Linter = require('tslint')\n  var fs = require(\"fs\")\n\n  // this task runs inside the subprocess to transform each event\n  return event => {\n    let linter = new Linter(event.sourcePath, fs.readFileSync(event.sourcePath, \"utf8\"), opts)\n    let result = linter.lint();\n    if (result.failureCount > 0) {\n      result.output.split(\"\\n\").filter(v => !!v.trim()).forEach(line => log.warn(\"tslint\", line))\n    }\n    return {};\n  }\n}\n\nfunction adaptEvent(compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n\n    if (event.type !== 'add' && event.type !== 'change') {\n      return event\n    }\n\n    if (event.fileType !== 'ts' && event.fileType !== 'tsx') {\n      return event\n    }\n\n    return compiler(_.pick(event, 'sourcePath')).then(() => event)\n  }\n}\n\nvar pooledProc\n\nexport default function(op, opts = {}) {\n  opts = Object.assign({}, opts, {\n    formatter: \"prose\"\n  });\n\n  if (! pooledProc) {\n    pooledProc = op.procPool.prepare(tslintTask, opts)\n  }\n\n  return mapEvents(op.stream, adaptEvent(pooledProc))\n}\n"]}